import RPi.GPIO as GPIO
import time
import os
import signal
import subprocess

# D√©finition du num√©ro de broche GPIO
LIGHT_SENSOR_PIN = 27  # Adapter selon le c√¢blage

# Configuration de la broche en entr√©e
GPIO.setmode(GPIO.BCM)
GPIO.setup(LIGHT_SENSOR_PIN, GPIO.IN)

# Chemins des fichiers √† supprimer
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
MISSION_PARTITION = "/dev/mmcblk0p3"
LOG_SCRIPT = os.path.join(BASE_DIR, "log_script.py")
LOG_FILE = os.path.join(BASE_DIR, "logs.txt")
PUBLIC_KEY_FILE = os.path.join(BASE_DIR, "armaguedon_pub.asc")


def stop_log_script():
    """Arr√™te le script de logs en cours d'ex√©cution."""
    try:
        print("üìã Recherche des processus log_script.py...")
        processes = os.popen("ps aux | grep log_script.py").read().splitlines()
        for process in processes:
            if "/usr/bin/python3 /mnt/log_script.py" in process:
                pid = int(process.split()[1])
                os.kill(pid, signal.SIGTERM)
                print(f"üõë Processus log_script.py (PID {pid}) arr√™t√©.")
                time.sleep(1)
                break
        else:
            print("‚úÖ Aucun processus log_script.py trouv√©.")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'arr√™t du script de logs : {e}")


def secure_delete(file_path):
    """Utilise shred pour supprimer un fichier de mani√®re s√©curis√©e."""
    if os.path.exists(file_path):
        print(f"üî• Suppression s√©curis√©e du fichier : {file_path}")
        os.system(f"shred -v -n 5 -z {file_path}")  # 5 passes + √©crasement final avec des z√©ros
        os.remove(file_path)  # Supprime le fichier apr√®s √©crasement
        print(f"‚úÖ {file_path} supprim√© de fa√ßon s√©curis√©e.")
    else:
        print(f"‚ö†Ô∏è Fichier {file_path} introuvable.")


def delete_files():
    """Supprime et √©crase les fichiers sensibles avant de supprimer la partition."""
    print("üö® D√©but de la suppression des fichiers sensibles...")

    # üî• Suppression s√©curis√©e des fichiers
    secure_delete(LOG_FILE)
    secure_delete(LOG_SCRIPT)
    secure_delete(PUBLIC_KEY_FILE)

    print("‚úÖ Suppression des fichiers termin√©e.")


def close_partition():
    """Ferme la partition crypt√©e (si n√©cessaire) avant de proc√©der √† sa destruction."""
    print(f"üõë Fermeture de la partition {MISSION_PARTITION}...")
    # V√©rifier si la partition est mont√©e et la d√©monter
    mount_check = subprocess.run(["lsblk", "-f"], capture_output=True, text=True)
    if MISSION_PARTITION in mount_check.stdout:
        print("‚ö†Ô∏è La partition est mont√©e, d√©montage en cours...")
        os.system(f"sudo umount {MISSION_PARTITION}")
        print(f"‚úÖ Partition {MISSION_PARTITION} d√©mont√©e.")
    
    # Fermer la partition si elle est crypt√©e
    if os.path.exists(f"/dev/mapper/cryptroot"):
        print("‚ö†Ô∏è La partition est crypt√©e, fermeture en cours...")
        os.system("sudo cryptsetup close cryptroot")
        print("‚úÖ Partition crypt√©e ferm√©e.")


def destroy_partition():
    """D√©truit compl√®tement la partition en √©crasant ses donn√©es."""
    print(f"üö® D√©but de la destruction s√©curis√©e de la partition {MISSION_PARTITION}...")

    # V√©rifier si la partition existe
    if not os.path.exists(MISSION_PARTITION):
        print(f"‚ö†Ô∏è La partition {MISSION_PARTITION} n'existe pas.")
        return

    # üî• Utilisation de `shred` pour d√©truire la partition
    print("üõë Remplacement des donn√©es de la partition avec des donn√©es al√©atoires...")
    os.system(f"sudo shred -v -n 5 -z {MISSION_PARTITION}")  # 5 passes + √©crasement final avec des z√©ros

    print("Destruction des headers LUKS...")
    os.system("sudo cryptsetup luksErase /dev/mapper/cryptroot")

    print("Suppression des fichiers de compl√©mentaires")
    os.system(f"sudo journalctl --rotate")
    os.system(f"sudo journalctl --vacuum-time=1s")
    os.system(f"sudo rm -rf /var/log/journal/*")
    os.system(f"shred -v -n 5 -z ~/.bash_history")
    os.system(f"rm ~/.bash_history")
    os.system(f"history -c")

    print(f"‚úÖ Partition {MISSION_PARTITION} effac√©e de fa√ßon s√©curis√©e.")


def read_light_sensor():
    """Lit l'√©tat du capteur de lumi√®re et agit en cons√©quence."""
    while True:
        light_detected = GPIO.input(LIGHT_SENSOR_PIN)
        if not light_detected:  # Si de la lumi√®re est d√©tect√©e
            print("üí° Lumi√®re d√©tect√©e ! D√©but de l'effacement...")
            stop_log_script()  # üõë Arr√™ter proprement les logs
            delete_files()     # üî• Supprimer tout et √©teindre la Raspberry Pi
            close_partition()
            destroy_partition()
            print("Mise hors tension.")
            os.system("sudo poweroff")
            break  # Sortir de la boucle apr√®s avoir agi
        else:
            print("üåë Obscurit√© ou faible lumi√®re")
        time.sleep(1)  # Pause d'une seconde avant la prochaine lecture

try:
    read_light_sensor()
except KeyboardInterrupt:
    print("\nArr√™t du programme.")
finally:
    GPIO.cleanup()  # R√©initialisation des GPIO
